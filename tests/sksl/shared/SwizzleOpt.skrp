    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. copy_4_constants               $0..3 = testInputs
    4. copy_4_slots_unmasked          v = $0..3
    5. zero_slot_unmasked             $0 = 0
    6. copy_4_slots_unmasked          $1..4 = v
    7. swizzle_3                      $1..3 = ($1..3).zyx
    8. copy_4_slots_masked            v = Mask($0..3)
    9. zero_slot_unmasked             $0 = 0
   10. zero_slot_unmasked             $1 = 0
   11. copy_4_slots_unmasked          $2..5 = v
   12. swizzle_1                      $3 = ($3..5).z
   13. copy_4_slots_masked            v = Mask($0..3)
   14. copy_constant                  $0 = 0x3F800000 (1.0)
   15. copy_constant                  $1 = 0x3F800000 (1.0)
   16. copy_4_slots_unmasked          $2..5 = v
   17. swizzle_2                      $2..3 = ($2..5).wx
   18. copy_4_slots_masked            v = Mask($0..3)
   19. copy_4_slots_unmasked          $0..3 = v
   20. swizzle_2                      $0..1 = ($0..2).zy
   21. copy_constant                  $2 = 0x3F800000 (1.0)
   22. copy_constant                  $3 = 0x3F800000 (1.0)
   23. copy_4_slots_masked            v = Mask($0..3)
   24. copy_4_slots_unmasked          $0..3 = v
   25. swizzle_2                      $0..1 = ($0..1).xx
   26. copy_constant                  $2 = 0x3F800000 (1.0)
   27. copy_constant                  $3 = 0x3F800000 (1.0)
   28. copy_4_slots_masked            v = Mask($0..3)
   29. copy_4_slots_unmasked          $0..3 = v
   30. swizzle_4                      $0..3 = ($0..3).wzwz
   31. copy_4_slots_masked            v = Mask($0..3)
   32. branch_if_no_active_lanes      branch_if_no_active_lanes +26 (#58)
   33. store_return_mask              $0 = RetMask
   34. copy_4_slots_unmasked          $1..4 = v
   35. copy_4_slots_unmasked          v = $1..4
   36. copy_constant                  $1 = 0x00000001 (1.401298e-45)
   37. copy_slot_unmasked             x = $1
   38. store_loop_mask                $1 = LoopMask
   39. jump                           jump +10 (#49)
   40. zero_slot_unmasked             [for-loop continue mask 0] = 0
   41. copy_slot_unmasked             $2 = v(0)
   42. copy_slot_masked               [fn].result = Mask($2)
   43. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   44. reenable_loop_mask             LoopMask |= [for-loop continue mask 0]
   45. copy_slot_unmasked             $2 = x
   46. copy_constant                  $3 = 0x00000001 (1.401298e-45)
   47. add_int                        $2 += $3
   48. copy_slot_masked               x = Mask($2)
   49. copy_slot_unmasked             $2 = x
   50. copy_constant                  $3 = 0x00000002 (2.802597e-45)
   51. cmple_int                      $2 = lessThanEqual($2, $3)
   52. merge_loop_mask                LoopMask &= $2
   53. stack_rewind
   54. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#40)
   55. load_loop_mask                 LoopMask = $1
   56. load_return_mask               RetMask = $0
   57. copy_slot_unmasked             $0 = [fn].result
   58. copy_constant                  $1 = 0x42F60000 (123.0)
   59. copy_constant                  $2 = 0x43E40000 (456.0)
   60. swizzle_4                      $0..3 = ($0..3).yyzz
   61. copy_4_slots_masked            v = Mask($0..3)
   62. branch_if_no_active_lanes      branch_if_no_active_lanes +26 (#88)
   63. store_return_mask              $0 = RetMask
   64. copy_4_slots_unmasked          $1..4 = v
   65. copy_4_slots_unmasked          v = $1..4
   66. copy_constant                  $1 = 0x00000001 (1.401298e-45)
   67. copy_slot_unmasked             x = $1
   68. store_loop_mask                $1 = LoopMask
   69. jump                           jump +10 (#79)
   70. zero_slot_unmasked             [for-loop continue mask 1] = 0
   71. copy_slot_unmasked             $2 = v(0)
   72. copy_slot_masked               [fn].result = Mask($2)
   73. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   74. reenable_loop_mask             LoopMask |= [for-loop continue mask 1]
   75. copy_slot_unmasked             $2 = x
   76. copy_constant                  $3 = 0x00000001 (1.401298e-45)
   77. add_int                        $2 += $3
   78. copy_slot_masked               x = Mask($2)
   79. copy_slot_unmasked             $2 = x
   80. copy_constant                  $3 = 0x00000002 (2.802597e-45)
   81. cmple_int                      $2 = lessThanEqual($2, $3)
   82. merge_loop_mask                LoopMask &= $2
   83. stack_rewind
   84. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#70)
   85. load_loop_mask                 LoopMask = $1
   86. load_return_mask               RetMask = $0
   87. copy_slot_unmasked             $0 = [fn].result
   88. copy_constant                  $1 = 0x42F60000 (123.0)
   89. copy_constant                  $2 = 0x43E40000 (456.0)
   90. swizzle_4                      $0..3 = ($0..3).yyzz
   91. copy_4_slots_masked            v = Mask($0..3)
   92. copy_constant                  $0 = 0x42F60000 (123.0)
   93. copy_constant                  $1 = 0x43E40000 (456.0)
   94. copy_constant                  $2 = 0x43E40000 (456.0)
   95. branch_if_no_active_lanes      branch_if_no_active_lanes +26 (#121)
   96. store_return_mask              $3 = RetMask
   97. copy_4_slots_unmasked          $4..7 = v
   98. copy_4_slots_unmasked          v = $4..7
   99. copy_constant                  $4 = 0x00000001 (1.401298e-45)
  100. copy_slot_unmasked             x = $4
  101. store_loop_mask                $4 = LoopMask
  102. jump                           jump +10 (#112)
  103. zero_slot_unmasked             [for-loop continue mask 2] = 0
  104. copy_slot_unmasked             $5 = v(0)
  105. copy_slot_masked               [fn].result = Mask($5)
  106. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  107. reenable_loop_mask             LoopMask |= [for-loop continue mask 2]
  108. copy_slot_unmasked             $5 = x
  109. copy_constant                  $6 = 0x00000001 (1.401298e-45)
  110. add_int                        $5 += $6
  111. copy_slot_masked               x = Mask($5)
  112. copy_slot_unmasked             $5 = x
  113. copy_constant                  $6 = 0x00000002 (2.802597e-45)
  114. cmple_int                      $5 = lessThanEqual($5, $6)
  115. merge_loop_mask                LoopMask &= $5
  116. stack_rewind
  117. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#103)
  118. load_loop_mask                 LoopMask = $4
  119. load_return_mask               RetMask = $3
  120. copy_slot_unmasked             $3 = [fn].result
  121. copy_4_slots_masked            v = Mask($0..3)
  122. copy_constant                  $0 = 0x42F60000 (123.0)
  123. copy_constant                  $1 = 0x43E40000 (456.0)
  124. copy_constant                  $2 = 0x43E40000 (456.0)
  125. branch_if_no_active_lanes      branch_if_no_active_lanes +26 (#151)
  126. store_return_mask              $3 = RetMask
  127. copy_4_slots_unmasked          $4..7 = v
  128. copy_4_slots_unmasked          v = $4..7
  129. copy_constant                  $4 = 0x00000001 (1.401298e-45)
  130. copy_slot_unmasked             x = $4
  131. store_loop_mask                $4 = LoopMask
  132. jump                           jump +10 (#142)
  133. zero_slot_unmasked             [for-loop continue mask 3] = 0
  134. copy_slot_unmasked             $5 = v(0)
  135. copy_slot_masked               [fn].result = Mask($5)
  136. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  137. reenable_loop_mask             LoopMask |= [for-loop continue mask 3]
  138. copy_slot_unmasked             $5 = x
  139. copy_constant                  $6 = 0x00000001 (1.401298e-45)
  140. add_int                        $5 += $6
  141. copy_slot_masked               x = Mask($5)
  142. copy_slot_unmasked             $5 = x
  143. copy_constant                  $6 = 0x00000002 (2.802597e-45)
  144. cmple_int                      $5 = lessThanEqual($5, $6)
  145. merge_loop_mask                LoopMask &= $5
  146. stack_rewind
  147. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#133)
  148. load_loop_mask                 LoopMask = $4
  149. load_return_mask               RetMask = $3
  150. copy_slot_unmasked             $3 = [fn].result
  151. copy_4_slots_masked            v = Mask($0..3)
  152. branch_if_no_active_lanes      branch_if_no_active_lanes +26 (#178)
  153. store_return_mask              $0 = RetMask
  154. copy_4_slots_unmasked          $1..4 = v
  155. copy_4_slots_unmasked          v = $1..4
  156. copy_constant                  $1 = 0x00000001 (1.401298e-45)
  157. copy_slot_unmasked             x = $1
  158. store_loop_mask                $1 = LoopMask
  159. jump                           jump +10 (#169)
  160. zero_slot_unmasked             [for-loop continue mask 4] = 0
  161. copy_slot_unmasked             $2 = v(0)
  162. copy_slot_masked               [fn].result = Mask($2)
  163. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  164. reenable_loop_mask             LoopMask |= [for-loop continue mask 4]
  165. copy_slot_unmasked             $2 = x
  166. copy_constant                  $3 = 0x00000001 (1.401298e-45)
  167. add_int                        $2 += $3
  168. copy_slot_masked               x = Mask($2)
  169. copy_slot_unmasked             $2 = x
  170. copy_constant                  $3 = 0x00000002 (2.802597e-45)
  171. cmple_int                      $2 = lessThanEqual($2, $3)
  172. merge_loop_mask                LoopMask &= $2
  173. stack_rewind
  174. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#160)
  175. load_loop_mask                 LoopMask = $1
  176. load_return_mask               RetMask = $0
  177. copy_slot_unmasked             $0 = [fn].result
  178. copy_constant                  $1 = 0x42F60000 (123.0)
  179. copy_constant                  $2 = 0x43E40000 (456.0)
  180. swizzle_4                      $0..3 = ($0..3).yxxz
  181. copy_4_slots_masked            v = Mask($0..3)
  182. branch_if_no_active_lanes      branch_if_no_active_lanes +26 (#208)
  183. store_return_mask              $0 = RetMask
  184. copy_4_slots_unmasked          $1..4 = v
  185. copy_4_slots_unmasked          v = $1..4
  186. copy_constant                  $1 = 0x00000001 (1.401298e-45)
  187. copy_slot_unmasked             x = $1
  188. store_loop_mask                $1 = LoopMask
  189. jump                           jump +10 (#199)
  190. zero_slot_unmasked             [for-loop continue mask 5] = 0
  191. copy_slot_unmasked             $2 = v(0)
  192. copy_slot_masked               [fn].result = Mask($2)
  193. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  194. reenable_loop_mask             LoopMask |= [for-loop continue mask 5]
  195. copy_slot_unmasked             $2 = x
  196. copy_constant                  $3 = 0x00000001 (1.401298e-45)
  197. add_int                        $2 += $3
  198. copy_slot_masked               x = Mask($2)
  199. copy_slot_unmasked             $2 = x
  200. copy_constant                  $3 = 0x00000002 (2.802597e-45)
  201. cmple_int                      $2 = lessThanEqual($2, $3)
  202. merge_loop_mask                LoopMask &= $2
  203. stack_rewind
  204. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#190)
  205. load_loop_mask                 LoopMask = $1
  206. load_return_mask               RetMask = $0
  207. copy_slot_unmasked             $0 = [fn].result
  208. copy_constant                  $1 = 0x42F60000 (123.0)
  209. copy_constant                  $2 = 0x43E40000 (456.0)
  210. swizzle_4                      $0..3 = ($0..3).yxxz
  211. copy_4_slots_masked            v = Mask($0..3)
  212. copy_constant                  $0 = 0x3F800000 (1.0)
  213. copy_constant                  $1 = 0x3F800000 (1.0)
  214. copy_constant                  $2 = 0x40000000 (2.0)
  215. copy_constant                  $3 = 0x40400000 (3.0)
  216. copy_4_slots_masked            v = Mask($0..3)
  217. copy_3_constants               $0..2 = colorRed(0..2)
  218. copy_constant                  $3 = 0x3F800000 (1.0)
  219. copy_4_slots_masked            v = Mask($0..3)
  220. copy_constant                  $0 = colorRed(0)
  221. copy_constant                  $1 = 0x3F800000 (1.0)
  222. copy_2_constants               $2..3 = colorRed(1..2)
  223. copy_4_slots_masked            v = Mask($0..3)
  224. copy_4_slots_unmasked          $0..3 = v
  225. copy_slot_masked               v(3) = Mask($0)
  226. copy_slot_masked               v(2) = Mask($1)
  227. copy_slot_masked               v(1) = Mask($2)
  228. copy_slot_masked               v(0) = Mask($3)
  229. copy_2_slots_unmasked          $0..1 = v(1..2)
  230. copy_slot_masked               v(0) = Mask($0)
  231. copy_slot_masked               v(3) = Mask($1)
  232. copy_4_slots_unmasked          $0..3 = v
  233. swizzle_2                      $0..1 = ($0..3).ww
  234. copy_constant                  $2 = 0x3F800000 (1.0)
  235. copy_slot_masked               v(2) = Mask($0)
  236. copy_slot_masked               v(1) = Mask($1)
  237. copy_slot_masked               v(0) = Mask($2)
  238. store_condition_mask           $8 = CondMask
  239. copy_4_slots_unmasked          $9..12 = v
  240. copy_constant                  $13 = 0x3F800000 (1.0)
  241. swizzle_4                      $13..16 = ($13..16).xxxx
  242. cmpeq_4_floats                 $9..12 = equal($9..12, $13..16)
  243. bitwise_and_2_ints             $9..10 &= $11..12
  244. bitwise_and_int                $9 &= $10
  245. copy_4_constants               $0..3 = colorRed
  246. merge_condition_mask           CondMask = $8 & $9
  247. copy_4_constants               $4..7 = colorGreen
  248. copy_4_slots_masked            $0..3 = Mask($4..7)
  249. load_condition_mask            CondMask = $8
  250. copy_4_slots_masked            [main].result = Mask($0..3)
  251. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  252. load_src                       src.rgba = [main].result
